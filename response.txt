{'data': {'question': {'title': 'Two Sum', 'titleSlug': 'two-sum', 'content': '<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n\n<p>You can return the answer in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class="example">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n\n<p><strong class="example">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class="example">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than <code>O(n<sup>2</sup>)</code><font face="monospace">&nbsp;</font>time complexity?', 'codeSnippets': [{'lang': 'C++', 'code': 'class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        \n    }\n};'}, {'lang': 'Java', 'code': 'class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        \n    }\n}'}, {'lang': 'Python', 'code': 'class Solution(object):\n    def twoSum(self, nums, target):\n        """\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        """\n        '}, {'lang': 'Python3', 'code': 'class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        '}, {'lang': 'C', 'code': '/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    \n}'}, {'lang': 'C#', 'code': 'public class Solution {\n    public int[] TwoSum(int[] nums, int target) {\n        \n    }\n}'}, {'lang': 'JavaScript', 'code': '/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    \n};'}, {'lang': 'TypeScript', 'code': 'function twoSum(nums: number[], target: number): number[] {\n    \n};'}, {'lang': 'PHP', 'code': 'class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function twoSum($nums, $target) {\n        \n    }\n}'}, {'lang': 'Swift', 'code': 'class Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {\n        \n    }\n}'}, {'lang': 'Kotlin', 'code': 'class Solution {\n    fun twoSum(nums: IntArray, target: Int): IntArray {\n        \n    }\n}'}, {'lang': 'Dart', 'code': 'class Solution {\n  List<int> twoSum(List<int> nums, int target) {\n    \n  }\n}'}, {'lang': 'Go', 'code': 'func twoSum(nums []int, target int) []int {\n    \n}'}, {'lang': 'Ruby', 'code': '# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(nums, target)\n    \nend'}, {'lang': 'Scala', 'code': 'object Solution {\n    def twoSum(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}'}, {'lang': 'Rust', 'code': 'impl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}'}, {'lang': 'Racket', 'code': '(define/contract (two-sum nums target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )'}, {'lang': 'Erlang', 'code': '-spec two_sum(Nums :: [integer()], Target :: integer()) -> [integer()].\ntwo_sum(Nums, Target) ->\n  .'}, {'lang': 'Elixir', 'code': 'defmodule Solution do\n  @spec two_sum(nums :: [integer], target :: integer) :: [integer]\n  def two_sum(nums, target) do\n    \n  end\nend'}]}}}